********* Observations About Wes' Base Style Sheet ********

I noticed that Wes uses a css declaration in the top of his style.css file to normalize the browser styles, so I found a version of it online and a python script that would minify css files and I've gone ahead and added that css file BEFORE the base style.css in the index.html file. Also, Wes makes all the elements on the page use a box-sizing: border-box, which means that the width/height and min/max properties will be based on the contents, padding, and border of boxes, not just the contents.

******** Intro To Flexbox *********

Flexbox is a different way of thinking about layouts, a different mental model, so we need to approach it as such and try not to think about other layout concepts like floats when approaching flexbox.

To utilize the flexbox properties, you will need a parent container, which will be the flex-container. You simply set the display type of the parent container to flex (or inline-flex, covered later), and then all of the items in that container become flex-items.

********* Working With Flex Direction ****************

The flex-direction property sets the main axis to be either left-to-right (row) or top-to-bottom (column). This is really important to understand, as it impacts the way most of the other properties will behave. If you set the flex-direction to row on the flex-container, then the flex-items will take up the entire height of the flex-container and will stack horizontally left-to-right on the page. If you set the flex-direction to column, then the flex-items will take up the entire width of the container, and will stack vertically top-to-bottom. There are two axis' when dealing with a flex-container, the main axis and the cross axis. When the flex-direction is row, the main axis runs left-to-right, horizontally, and the cross axis runs top-to-bottom, vertically. When the flex-direction is set to column, the main axis runs top-to-bottom, vertically, and the cross axis runs left-to-right, horizontally. If you don't set a flex-direction property, it is automatically set to row. There are row-reverse and column-reverse properties as well. In row-reverse, the main axis is still horizontal, but the items are laid out right-to-left. In column-reverse, the main axis is still vertical, but the items are laid out bottom-to-top.

********** Wrapping Elements ***************

By default, in flex-direction: row containers, the flex-items will take up the entire height of their container and be laid out left-to-right on ONE row. Their widths can be adjusted, but only until they take up the entire row, at that point, adding more width won't do anything. If you want your items to be of a certain width, and then start taking up more rows if there are too many of them to fit on one row, you need the flex-wrap property. The flex-wrap property is applied to the flex-container, and if set to flex-wrap: wrap, it will allow the flex-items to form stacked rows if they become too wide to fit on one row. When there is just one row, the row of flex-items takes up the entire height of the flex-container. If you allow more rows to form using flex-wrap, then the browser will intelligently set the height of the rows (by setting the height of the flex-items in the row) so that the rows have the same height, and take up the entire height of the container. So, if you have 6 flex-items, and they are sized such as they form two rows (3-3, 4-2, etc...), then EACH ROW will take up 50% of the height of the container, since the entire height of the container must be filled by the rows. The default for the flex-wrap property is nowrap.

Just like how you have the option to reverse the direction of the axis with row-reverse and column-reverse properties of flex-direction, you can reverse direction that items are stacked along the cross axis with wrap-reverse. If your flex-direction is row, then your items are laid out on the page from left-to-right. If you set the flex-wrap to wrap-reverse, the items will form more rows on TOP of the first row.

If you have your flex-direction set to column, then you will get one column of flex-items. If you would like to have multiple columns, then you will need to set some sort of height on the flex-container, that way the columns have something to bump up against and then need to wrap to a new column.