********* Observations About Wes' Base Style Sheet ********

I noticed that Wes uses a css declaration in the top of his style.css file to normalize the browser styles, so I found a version of it online and a python script that would minify css files and I've gone ahead and added that css file BEFORE the base style.css in the index.html file. Also, Wes makes all the elements on the page use a box-sizing: border-box, which means that the width/height and min/max properties will be based on the contents, padding, and border of boxes, not just the contents.

******** Intro To Flexbox *********

Flexbox is a different way of thinking about layouts, a different mental model, so we need to approach it as such and try not to think about other layout concepts like floats when approaching flexbox.

To utilize the flexbox properties, you will need a parent container, which will be the flex-container. You simply set the display type of the parent container to flex (or inline-flex, covered later), and then all of the items in that container become flex-items.

********* Working With Flex Direction ****************

The flex-direction property sets the main axis to be either left-to-right (row) or top-to-bottom (column). This is really important to understand, as it impacts the way most of the other properties will behave. If you set the flex-direction to row on the flex-container, then the flex-items will take up the entire height of the flex-container and will stack horizontally left-to-right on the page. If you set the flex-direction to column, then the flex-items will take up the entire width of the container, and will stack vertically top-to-bottom. There are two axis' when dealing with a flex-container, the main axis and the cross axis. When the flex-direction is row, the main axis runs left-to-right, horizontally, and the cross axis runs top-to-bottom, vertically. When the flex-direction is set to column, the main axis runs top-to-bottom, vertically, and the cross axis runs left-to-right, horizontally. If you don't set a flex-direction property, it is automatically set to row. There are row-reverse and column-reverse properties as well. In row-reverse, the main axis is still horizontal, but the items are laid out right-to-left. In column-reverse, the main axis is still vertical, but the items are laid out bottom-to-top.

********** Wrapping Elements ***************

By default, in flex-direction: row containers, the flex-items will take up the entire height of their container and be laid out left-to-right on ONE row. Their widths can be adjusted, but only until they take up the entire row, at that point, adding more width won't do anything. If you want your items to be of a certain width, and then start taking up more rows if there are too many of them to fit on one row, you need the flex-wrap property. The flex-wrap property is applied to the flex-container, and if set to flex-wrap: wrap, it will allow the flex-items to form stacked rows if they become too wide to fit on one row. When there is just one row, the row of flex-items takes up the entire height of the flex-container. If you allow more rows to form using flex-wrap, then the browser will intelligently set the height of the rows (by setting the height of the flex-items in the row) so that the rows have the same height, and take up the entire height of the container. So, if you have 6 flex-items, and they are sized such as they form two rows (3-3, 4-2, etc...), then EACH ROW will take up 50% of the height of the container, since the entire height of the container must be filled by the rows. The default for the flex-wrap property is nowrap.

Just like how you have the option to reverse the direction of the axis with row-reverse and column-reverse properties of flex-direction, you can reverse direction that items are stacked along the cross axis with wrap-reverse. If your flex-direction is row, then your items are laid out on the page from left-to-right. If you set the flex-wrap to wrap-reverse, the items will form more rows on TOP of the first row.

If you have your flex-direction set to column, then you will get one column of flex-items. If you would like to have multiple columns, then you will need to set some sort of height on the flex-container, that way the columns have something to bump up against and then need to wrap to a new column.

************************ Ordering Elements *************************

Flexbox allows you the power to change the order that the elements appear on the page using the order property on the flex-item. Before flexbox, you would need to use JavaScript in order to move certain elements out of source order. Now, it is easy to do, you just set the order property. The default is 0, so all items greater than 0 will be after all items at 0, and you can use negative numbers to set items before items set to 0. It's important to note that this doesn't change the order of the HTML on the page, just where the item appears. So, the source order in the HTML document will remain the same.

************** Alignment and Centering with Justify-Content ***************

Justify-content is a property that determines how items are aligned on the main axis. The main axis, if we remember, is determined by the flex-direction property. It can be along the horizontal, which is row, or the vertical, which is column. You can align the content to the start or end of the axis with flex-start and flex-end. You can center the content with center. There are three properties for adding space between and around the elements.
  1. Space between
    - aligns the first item to the flex start and the last item to the flex end, then puts equal space between the rest of the items. The first and last items will be right on the edge of the container.
  2. Space around
    - aligns the first item to the flex start and the last item to the flex end along the main axis, then puts equal space on each side of each item. This means the item at the flex start will have half of the space on the side that bumps against the edge of the main axis, as will the item at the flex end.
  3. Space evenly
    - If you want the items to take up the whole axis and have the same amount of space on both sides, the space evenly property will allow this.

When the main axis runs vertically (flex-direction: column|column-reverse), justify-content can get a litle tricky. You have to ensure that the flex-container has a set-height, and that the flex-items do not take up the whole height of the container, because if they do, there will be no room for the justify-content property to work with. There needs to be some dead space in the height, otherwise, there will be none to place between the flex items. You can set a min-height on the container, or just hard-code something if it is supposed to be an exact height.

************** Alignment and Centering with Align-Items *******************

We just looked at the justify-content property, which is used to align items along the MAIN axis. In contrast, the align-items property aligns the items in the flex-container along the CROSS axis. So, in the default flex-direction (row) the main axis runs left-to-right horizontally and the cross axis runs top-to-bottom vertically. If we want to use align-items then, the flex-container will need to have a height, otherwise, the container will just be as tall as the tallest item. Once the flex-container has a height, we can then align our items in that container.

The default setting for align-items is stretch, which means the items will be stretched along the cross axis. So, if we are in flex-direction: row, the items will be stretched vertically. If we are in flex-direction: column, the elements will be stretched horizontally. There are the standard center, flex-start, and flex-end properties, and there is also one called baseline which is really handy for aligning different sized boxes that have text or some other content that needs to be on the same line.

************** Alignment and Centering with Align-Content *******************

align-content is similar to justify-content in that it's job is to figure out what to do with the extra space left in a container. Justify-content deals with the space along the main axis, while align-content deals with the space along the cross axis. Just like how justify-content needs some dead space on the main axis to work with, align-content needs some dead space on the cross axis to work with. This means, in order to utilize align-content, you will need multiple rows of content, and flex-wrap: wrap will need to be set.

The default setting for align-content is stretch, so once you have multiple rows of flex-items they should stretch their height (in row layouts) to fill the container evenly. Once you start setting align-content, you will notice that the height of the rows will be whatever the tallest item in the row is, so that all items in the row have the same height.


****************** A NOTE AT THIS POINT ******************

There are a lot of defaults that get set once you make a container a flex-container. For the first couple of projects where I use flexbox, I should definitely explicitly define all the defaults in the stylesheet that way I'm aware that they are present and that I must manually override them if I want a different behavior.

**************** Alignment and Centering with Align-Self **********************

Align-self is similar to align-items, in that it aligns elements on the cross axis. Whereas align-items is applied to the flex container, align-self is applied to individual flex-items to override any calls to align-items.

*********** Understanding Flexbox Sizing with the Flex Property **************

The flex property is applied to individual flex-items and determines the sizing of the items relative to each other. This section will examine the flex property with only one value, which is the proportion of space the selected flex-item should take up relative to the other flex-items.

One of the main purposes of the flexbox layout style is to deal with the distribution of space in a flex-container as the size of the container and amount of space changes. Using the flex property with just one value, we can set the width of the flex-items in our container to be intelligently mangaged by flexbox. By default, the width of flex-items is just the width of the content. By setting the flex property to 1 on all items, you can tell them to basically intelligently set their widths to where they are all the same size, and they all take up the same amount of space in the container. If you then set the flex property on individual flex items, say on one of the boxes to be flex: 2, then that box would take up twice as much space as the other flex-items.
