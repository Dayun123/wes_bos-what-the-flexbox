/* this determines how the width and height of a box are calculated. Normally, the width/height and min/max properties only include the content of the box, border and padding are not accounted for. Using the box-sizing: border-box; declaration, we tell the browser that we what the width/height and min/max properties to include the content, padding, and border. Notice we use the '*' selector, which sets this property on all elements. */
* {
  box-sizing: border-box;
}

.box {
  color: white;
  font-size: 50px;
  text-align: center;
  padding: 10px;
}

.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}

/* This is our flex container. */
.container {
  /* This makes our container a flex-container, and it will take up the entire width of the page like a block-level item. If we only want the flex container to be the size of the flex-items it contains, we can use 'inline-flex'. */
  display: flex;
  border: 10px solid goldenrod;
  /* Makes the height of our flex-container the same as the height of the viewport, so basically the container will always take up the height of the entire page. This has nothing to do with flexbox, it just will help us to visualize the concepts down the line. */
  height: 100vh;
  /* The flex-direction determines whether the main axis will be vertical or horizontal, and whether items will be laid out from left-to-right/right-to-left(row and row-reverse) or top-to-bottom/bottom-to-top(column and column-reverse). flex-direction: row; is the default. */
  flex-direction: row;
}