/* this determines how the width and height of a box are calculated. Normally, the width/height and min/max properties only include the content of the box, border and padding are not accounted for. Using the box-sizing: border-box; declaration, we tell the browser that we what the width/height and min/max properties to include the content, padding, and border. Notice we use the '*' selector, which sets this property on all elements. */
* {
  box-sizing: border-box;
}

.box {
  color: white;
  font-size: 40px;
  text-align: center;
  padding: 10px;
}

.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}

/* This is our flex container. */
.container {
  display: flex;
  border: 10px solid black;
  height: 90vh;
}

.box1 {
  /* Hard to explain how the proportions work here... Basically, setting the flex-grow property will allow this box to add the extra space in a container to its width. If all boxes in a container have a flex-grow of 1, then all the space left over after their flex-basis' have been calculated will be distributed evenly to all of them. */
  flex-grow: 1;
  /* Flex-shrink allows this flex-item to give up this proportion of it's width as the available space in the container gets smaller. */
  flex-shrink: 10;
  /* In an ideal situation, set the width of the flex-item to 200px. */
  flex-basis: 400px;

  /* All of the above properties can and SHOULD be replaced by the single flex property. */
  flex: 1 10 400px;
}

.box2 {
  flex-grow: 1;
  flex-shrink: 1;
  flex-basis: 400px;
  flex: 1 1 400px;
}