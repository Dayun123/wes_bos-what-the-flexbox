/* Some CSS Setup - nothing to do with flexbox */
html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

body {
  font-family: sans-serif;
  margin: 0;
  background-image: linear-gradient(260deg, #2376ae 0%, #c16ecf 100%);
}

a {
  color:white;
  font-weight: 100;
  letter-spacing: 2px;
  text-decoration: none;
  background:rgba(0,0,0,0.2);
  padding:20px 5px;
  display: inline-block;
  width: 100%;
  text-align: center;
  transition:all 0.5s;
}

a:hover {
  background:rgba(0,0,0,0.3);
}

.toggleNav {
  display: none;
}

img {
  width:100%;
}

.wrapper {
  max-width: 1000px;
  margin: 0 auto;
}

input {
  padding:10px;
  margin: 5px;
  border:0;
  flex: 1;
}

form {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
}

input:not([type="submit"]) {
  flex: 3;
  max-width: 300px;
}

input[type="submit"] {
  max-width: 200px;
}

section, footer {
  text-align: center;
  background:rgba(0,0,0,0.2);
  padding:20px;
  margin:20px 0;
  color:white;
  font-weight: 100;
}



/* The flex-container that holds the navigation items. */
.flex-nav {
  border:1px solid black;
  list-style: none;
  margin: 0;
  padding: 0;
  display: flex;
}

/* Flex-items in the nav bar */
.flex-nav li {
  flex: 3;
}

/* Flex-items in the nav bar that are social icons */
.flec-nav .social {
  flex: 1;
}

/* Adjusted this for my smaller screen. */
@media all and (max-width:850px) {

  /* We want the nav to split over multiple rows, so we need to allow wrapping*/
  .flex-nav {
    flex-wrap: wrap;
  }

  .flex-nav li {
    flex-basis: 50%;
  }

  /* Makes sure that our social icons all stay in one row (there are 4, so 1/4 of 100%) */
  .flex-nav .social {
    flex-basis: 25%;
  }

}

/* Adjusted this for my smaller screen. */
@media all and (max-width:550px) {

  /* Each flex-item should take up the full width of the container, effectively making them stack in a column. I'm not sure I like this amount of specificity, something to work on for sure. */
  .flex-nav li {
    flex: 1 1 100%;
  }

  /* We want to change the order of the major sections of the page, so they need to be flex-items. In order to make them flex-items, we first need to have a flex-container to contain them in. There is a div.wrapper that is the parent of the major sections of the page, and we can use this as our flex-container. */
  .wrapper {
    display: flex;
    /* We think of the main axis of the items on the page as being in a column, so it makes sense to set the flex-direction to column. */
    flex-direction: column;
  }

  /* Select all flex-items */
  .wrapper > * {
    /* We want to order our items logically, like 1,2,3,4 etc..., so we set the default for all the flex-items to be a high number, that way when we start setting individual order properties things will line up correctly. */
    order: 100;
  }

  /* Now, for re-ordering the major sections. Nav goes first. We need the .wrapper selector because we want to make sure the specificity is high enough. Wouldn't need to do this if we didn't set the order high on all of the flex-items and just manually set all of their orders. The rest of the sections have their own classes, and that is a high enough specificity to override the default. */
  .wrapper nav {
    order: 1;
  }

  .top {
    order: 2;
  }

  .details {
    order: 3;
  }

  .signup {
    order: 4;
  }

  /* No need to set hero and footer order, as they have an order of 100 set from the general rule above so they will order themselves at the end of the document in the order they appear (so hero first, then footer) */

  /* This was not displayed on the other views, we need to add it back in. */
  .toggleNav {
    display: block;
  }

  /* Remove the navigation from the page, it will be toggled using JavaScript. */
  .flex-nav {
    display: none;
  }

  /* This class will be added dynamically by JavaScript to display the nav menu when the nav button is */
  .open {
    display: flex;
  }

}
